
size:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

00000000004009e0 <_init>:
  4009e0:	48 83 ec 08          	sub    $0x8,%rsp
  4009e4:	48 8b 05 0d 16 20 00 	mov    0x20160d(%rip),%rax        # 601ff8 <_DYNAMIC+0x1f0>
  4009eb:	48 85 c0             	test   %rax,%rax
  4009ee:	74 05                	je     4009f5 <_init+0x15>
  4009f0:	e8 3b 00 00 00       	callq  400a30 <__gmon_start__@plt>
  4009f5:	48 83 c4 08          	add    $0x8,%rsp
  4009f9:	c3                   	retq   

Desensamblado de la sección .plt:

0000000000400a00 <memset@plt-0x10>:
  400a00:	ff 35 02 16 20 00    	pushq  0x201602(%rip)        # 602008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400a06:	ff 25 04 16 20 00    	jmpq   *0x201604(%rip)        # 602010 <_GLOBAL_OFFSET_TABLE_+0x10>
  400a0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400a10 <memset@plt>:
  400a10:	ff 25 02 16 20 00    	jmpq   *0x201602(%rip)        # 602018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400a16:	68 00 00 00 00       	pushq  $0x0
  400a1b:	e9 e0 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400a20 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
  400a20:	ff 25 fa 15 20 00    	jmpq   *0x2015fa(%rip)        # 602020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400a26:	68 01 00 00 00       	pushq  $0x1
  400a2b:	e9 d0 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400a30 <__gmon_start__@plt>:
  400a30:	ff 25 f2 15 20 00    	jmpq   *0x2015f2(%rip)        # 602028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400a36:	68 02 00 00 00       	pushq  $0x2
  400a3b:	e9 c0 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400a40 <operator delete(void*)@plt>:
  400a40:	ff 25 ea 15 20 00    	jmpq   *0x2015ea(%rip)        # 602030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400a46:	68 03 00 00 00       	pushq  $0x3
  400a4b:	e9 b0 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400a50 <std::ios_base::Init::Init()@plt>:
  400a50:	ff 25 e2 15 20 00    	jmpq   *0x2015e2(%rip)        # 602038 <_GLOBAL_OFFSET_TABLE_+0x38>
  400a56:	68 04 00 00 00       	pushq  $0x4
  400a5b:	e9 a0 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400a60 <__libc_start_main@plt>:
  400a60:	ff 25 da 15 20 00    	jmpq   *0x2015da(%rip)        # 602040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400a66:	68 05 00 00 00       	pushq  $0x5
  400a6b:	e9 90 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400a70 <std::chrono::_V2::system_clock::now()@plt>:
  400a70:	ff 25 d2 15 20 00    	jmpq   *0x2015d2(%rip)        # 602048 <_GLOBAL_OFFSET_TABLE_+0x48>
  400a76:	68 06 00 00 00       	pushq  $0x6
  400a7b:	e9 80 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400a80 <__cxa_atexit@plt>:
  400a80:	ff 25 ca 15 20 00    	jmpq   *0x2015ca(%rip)        # 602050 <_GLOBAL_OFFSET_TABLE_+0x50>
  400a86:	68 07 00 00 00       	pushq  $0x7
  400a8b:	e9 70 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400a90 <std::ios_base::Init::~Init()@plt>:
  400a90:	ff 25 c2 15 20 00    	jmpq   *0x2015c2(%rip)        # 602058 <_GLOBAL_OFFSET_TABLE_+0x58>
  400a96:	68 08 00 00 00       	pushq  $0x8
  400a9b:	e9 60 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400aa0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
  400aa0:	ff 25 ba 15 20 00    	jmpq   *0x2015ba(%rip)        # 602060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400aa6:	68 09 00 00 00       	pushq  $0x9
  400aab:	e9 50 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400ab0 <memmove@plt>:
  400ab0:	ff 25 b2 15 20 00    	jmpq   *0x2015b2(%rip)        # 602068 <_GLOBAL_OFFSET_TABLE_+0x68>
  400ab6:	68 0a 00 00 00       	pushq  $0xa
  400abb:	e9 40 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400ac0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>:
  400ac0:	ff 25 aa 15 20 00    	jmpq   *0x2015aa(%rip)        # 602070 <_GLOBAL_OFFSET_TABLE_+0x70>
  400ac6:	68 0b 00 00 00       	pushq  $0xb
  400acb:	e9 30 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400ad0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
  400ad0:	ff 25 a2 15 20 00    	jmpq   *0x2015a2(%rip)        # 602078 <_GLOBAL_OFFSET_TABLE_+0x78>
  400ad6:	68 0c 00 00 00       	pushq  $0xc
  400adb:	e9 20 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400ae0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
  400ae0:	ff 25 9a 15 20 00    	jmpq   *0x20159a(%rip)        # 602080 <_GLOBAL_OFFSET_TABLE_+0x80>
  400ae6:	68 0d 00 00 00       	pushq  $0xd
  400aeb:	e9 10 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400af0 <__gxx_personality_v0@plt>:
  400af0:	ff 25 92 15 20 00    	jmpq   *0x201592(%rip)        # 602088 <_GLOBAL_OFFSET_TABLE_+0x88>
  400af6:	68 0e 00 00 00       	pushq  $0xe
  400afb:	e9 00 ff ff ff       	jmpq   400a00 <_init+0x20>

0000000000400b00 <operator new(unsigned long)@plt>:
  400b00:	ff 25 8a 15 20 00    	jmpq   *0x20158a(%rip)        # 602090 <_GLOBAL_OFFSET_TABLE_+0x90>
  400b06:	68 0f 00 00 00       	pushq  $0xf
  400b0b:	e9 f0 fe ff ff       	jmpq   400a00 <_init+0x20>

0000000000400b10 <_Unwind_Resume@plt>:
  400b10:	ff 25 82 15 20 00    	jmpq   *0x201582(%rip)        # 602098 <_GLOBAL_OFFSET_TABLE_+0x98>
  400b16:	68 10 00 00 00       	pushq  $0x10
  400b1b:	e9 e0 fe ff ff       	jmpq   400a00 <_init+0x20>

Desensamblado de la sección .text:

0000000000400b20 <main>:
  400b20:	41 57                	push   %r15
  400b22:	41 56                	push   %r14
  400b24:	ba 01 00 00 00       	mov    $0x1,%edx
  400b29:	41 55                	push   %r13
  400b2b:	41 54                	push   %r12
  400b2d:	be 14 13 40 00       	mov    $0x401314,%esi
  400b32:	55                   	push   %rbp
  400b33:	53                   	push   %rbx
  400b34:	bf c0 20 60 00       	mov    $0x6020c0,%edi
  400b39:	48 83 ec 18          	sub    $0x18,%rsp
  400b3d:	e8 5e ff ff ff       	callq  400aa0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  400b42:	48 8b 05 77 15 20 00 	mov    0x201577(%rip),%rax        # 6020c0 <std::cout@@GLIBCXX_3.4>
  400b49:	ba 04 00 00 00       	mov    $0x4,%edx
  400b4e:	be 16 13 40 00       	mov    $0x401316,%esi
  400b53:	bf c0 20 60 00       	mov    $0x6020c0,%edi
  400b58:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  400b5c:	48 c7 80 d0 20 60 00 	movq   $0xb,0x6020d0(%rax)
  400b63:	0b 00 00 00 
  400b67:	e8 34 ff ff ff       	callq  400aa0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  400b6c:	48 8b 05 4d 15 20 00 	mov    0x20154d(%rip),%rax        # 6020c0 <std::cout@@GLIBCXX_3.4>
  400b73:	ba 04 00 00 00       	mov    $0x4,%edx
  400b78:	be 1b 13 40 00       	mov    $0x40131b,%esi
  400b7d:	bf c0 20 60 00       	mov    $0x6020c0,%edi
  400b82:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  400b86:	48 c7 80 d0 20 60 00 	movq   $0xc,0x6020d0(%rax)
  400b8d:	0c 00 00 00 
  400b91:	e8 0a ff ff ff       	callq  400aa0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  400b96:	bf c0 20 60 00       	mov    $0x6020c0,%edi
  400b9b:	e8 40 ff ff ff       	callq  400ae0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
  400ba0:	c7 44 24 0c 11 00 00 	movl   $0x11,0xc(%rsp)
  400ba7:	00 
  400ba8:	c7 44 24 08 00 04 00 	movl   $0x400,0x8(%rsp)
  400baf:	00 
  400bb0:	8b 6c 24 08          	mov    0x8(%rsp),%ebp
  400bb4:	48 89 ef             	mov    %rbp,%rdi
  400bb7:	44 8d 65 ff          	lea    -0x1(%rbp),%r12d
  400bbb:	e8 40 ff ff ff       	callq  400b00 <operator new(unsigned long)@plt>
  400bc0:	48 89 ea             	mov    %rbp,%rdx
  400bc3:	48 89 c7             	mov    %rax,%rdi
  400bc6:	31 f6                	xor    %esi,%esi
  400bc8:	48 89 c3             	mov    %rax,%rbx
  400bcb:	e8 40 fe ff ff       	callq  400a10 <memset@plt>
  400bd0:	bf 90 01 00 00       	mov    $0x190,%edi
  400bd5:	e8 26 ff ff ff       	callq  400b00 <operator new(unsigned long)@plt>
  400bda:	49 89 c7             	mov    %rax,%r15
  400bdd:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  400be4:	48 8d 80 90 01 00 00 	lea    0x190(%rax),%rax
  400beb:	49 8d 7f 08          	lea    0x8(%r15),%rdi
  400bef:	4c 89 f9             	mov    %r15,%rcx
  400bf2:	49 c7 87 88 01 00 00 	movq   $0x0,0x188(%r15)
  400bf9:	00 00 00 00 
  400bfd:	48 89 04 24          	mov    %rax,(%rsp)
  400c01:	31 c0                	xor    %eax,%eax
  400c03:	4d 89 fd             	mov    %r15,%r13
  400c06:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
  400c0a:	48 29 f9             	sub    %rdi,%rcx
  400c0d:	81 c1 90 01 00 00    	add    $0x190,%ecx
  400c13:	c1 e9 03             	shr    $0x3,%ecx
  400c16:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  400c19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  400c20:	e8 4b fe ff ff       	callq  400a70 <std::chrono::_V2::system_clock::now()@plt>
  400c25:	49 89 c6             	mov    %rax,%r14
  400c28:	31 c0                	xor    %eax,%eax
  400c2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  400c30:	44 89 e6             	mov    %r12d,%esi
  400c33:	21 c6                	and    %eax,%esi
  400c35:	48 39 f5             	cmp    %rsi,%rbp
  400c38:	0f 86 ff 00 00 00    	jbe    400d3d <main+0x21d>
  400c3e:	83 c0 40             	add    $0x40,%eax
  400c41:	80 04 33 01          	addb   $0x1,(%rbx,%rsi,1)
  400c45:	3d 00 e1 f5 05       	cmp    $0x5f5e100,%eax
  400c4a:	75 e4                	jne    400c30 <main+0x110>
  400c4c:	e8 1f fe ff ff       	callq  400a70 <std::chrono::_V2::system_clock::now()@plt>
  400c51:	66 0f ef c0          	pxor   %xmm0,%xmm0
  400c55:	4c 29 f0             	sub    %r14,%rax
  400c58:	49 83 c5 08          	add    $0x8,%r13
  400c5c:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  400c61:	f2 0f 59 05 07 07 00 	mulsd  0x707(%rip),%xmm0        # 401370 <_IO_stdin_used+0x60>
  400c68:	00 
  400c69:	f2 41 0f 11 45 f8    	movsd  %xmm0,-0x8(%r13)
  400c6f:	4c 3b 2c 24          	cmp    (%rsp),%r13
  400c73:	75 ab                	jne    400c20 <main+0x100>
  400c75:	49 8d b7 c8 00 00 00 	lea    0xc8(%r15),%rsi
  400c7c:	4c 39 ee             	cmp    %r13,%rsi
  400c7f:	74 18                	je     400c99 <main+0x179>
  400c81:	48 83 ec 08          	sub    $0x8,%rsp
  400c85:	4c 89 ea             	mov    %r13,%rdx
  400c88:	b9 0a 00 00 00       	mov    $0xa,%ecx
  400c8d:	6a 00                	pushq  $0x0
  400c8f:	4c 89 ff             	mov    %r15,%rdi
  400c92:	e8 39 03 00 00       	callq  400fd0 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)>
  400c97:	58                   	pop    %rax
  400c98:	5a                   	pop    %rdx
  400c99:	48 8b 05 20 14 20 00 	mov    0x201420(%rip),%rax        # 6020c0 <std::cout@@GLIBCXX_3.4>
  400ca0:	f2 41 0f 10 8f c8 00 	movsd  0xc8(%r15),%xmm1
  400ca7:	00 00 
  400ca9:	48 89 ee             	mov    %rbp,%rsi
  400cac:	bf c0 20 60 00       	mov    $0x6020c0,%edi
  400cb1:	f2 0f 11 0c 24       	movsd  %xmm1,(%rsp)
  400cb6:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  400cba:	48 c7 80 d0 20 60 00 	movq   $0xc,0x6020d0(%rax)
  400cc1:	0c 00 00 00 
  400cc5:	e8 f6 fd ff ff       	callq  400ac0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
  400cca:	48 8b 10             	mov    (%rax),%rdx
  400ccd:	f2 0f 10 04 24       	movsd  (%rsp),%xmm0
  400cd2:	48 89 c7             	mov    %rax,%rdi
  400cd5:	48 8b 4a e8          	mov    -0x18(%rdx),%rcx
  400cd9:	48 c7 44 08 10 0c 00 	movq   $0xc,0x10(%rax,%rcx,1)
  400ce0:	00 00 
  400ce2:	48 89 c1             	mov    %rax,%rcx
  400ce5:	48 03 4a e8          	add    -0x18(%rdx),%rcx
  400ce9:	8b 51 18             	mov    0x18(%rcx),%edx
  400cec:	48 c7 41 08 03 00 00 	movq   $0x3,0x8(%rcx)
  400cf3:	00 
  400cf4:	81 e2 fb fe ff ff    	and    $0xfffffefb,%edx
  400cfa:	83 ca 04             	or     $0x4,%edx
  400cfd:	89 51 18             	mov    %edx,0x18(%rcx)
  400d00:	e8 cb fd ff ff       	callq  400ad0 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  400d05:	48 89 c7             	mov    %rax,%rdi
  400d08:	e8 d3 fd ff ff       	callq  400ae0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
  400d0d:	4c 89 ff             	mov    %r15,%rdi
  400d10:	e8 2b fd ff ff       	callq  400a40 <operator delete(void*)@plt>
  400d15:	48 89 df             	mov    %rbx,%rdi
  400d18:	e8 23 fd ff ff       	callq  400a40 <operator delete(void*)@plt>
  400d1d:	d1 64 24 08          	shll   0x8(%rsp)
  400d21:	83 6c 24 0c 01       	subl   $0x1,0xc(%rsp)
  400d26:	0f 85 84 fe ff ff    	jne    400bb0 <main+0x90>
  400d2c:	48 83 c4 18          	add    $0x18,%rsp
  400d30:	31 c0                	xor    %eax,%eax
  400d32:	5b                   	pop    %rbx
  400d33:	5d                   	pop    %rbp
  400d34:	41 5c                	pop    %r12
  400d36:	41 5d                	pop    %r13
  400d38:	41 5e                	pop    %r14
  400d3a:	41 5f                	pop    %r15
  400d3c:	c3                   	retq   
  400d3d:	48 89 ea             	mov    %rbp,%rdx
  400d40:	bf 20 13 40 00       	mov    $0x401320,%edi
  400d45:	31 c0                	xor    %eax,%eax
  400d47:	e8 d4 fc ff ff       	callq  400a20 <std::__throw_out_of_range_fmt(char const*, ...)@plt>
  400d4c:	4c 89 ff             	mov    %r15,%rdi
  400d4f:	48 89 c5             	mov    %rax,%rbp
  400d52:	e8 e9 fc ff ff       	callq  400a40 <operator delete(void*)@plt>
  400d57:	48 89 df             	mov    %rbx,%rdi
  400d5a:	e8 e1 fc ff ff       	callq  400a40 <operator delete(void*)@plt>
  400d5f:	48 89 ef             	mov    %rbp,%rdi
  400d62:	e8 a9 fd ff ff       	callq  400b10 <_Unwind_Resume@plt>
  400d67:	48 89 c5             	mov    %rax,%rbp
  400d6a:	eb eb                	jmp    400d57 <main+0x237>
  400d6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400d70 <_GLOBAL__sub_I_main>:
  400d70:	48 83 ec 08          	sub    $0x8,%rsp
  400d74:	bf d1 21 60 00       	mov    $0x6021d1,%edi
  400d79:	e8 d2 fc ff ff       	callq  400a50 <std::ios_base::Init::Init()@plt>
  400d7e:	ba a8 20 60 00       	mov    $0x6020a8,%edx
  400d83:	be d1 21 60 00       	mov    $0x6021d1,%esi
  400d88:	bf 90 0a 40 00       	mov    $0x400a90,%edi
  400d8d:	48 83 c4 08          	add    $0x8,%rsp
  400d91:	e9 ea fc ff ff       	jmpq   400a80 <__cxa_atexit@plt>
  400d96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400d9d:	00 00 00 

0000000000400da0 <set_fast_math>:
  400da0:	0f ae 5c 24 fc       	stmxcsr -0x4(%rsp)
  400da5:	81 4c 24 fc 40 80 00 	orl    $0x8040,-0x4(%rsp)
  400dac:	00 
  400dad:	0f ae 54 24 fc       	ldmxcsr -0x4(%rsp)
  400db2:	c3                   	retq   
  400db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400dba:	00 00 00 
  400dbd:	0f 1f 00             	nopl   (%rax)

0000000000400dc0 <_start>:
  400dc0:	31 ed                	xor    %ebp,%ebp
  400dc2:	49 89 d1             	mov    %rdx,%r9
  400dc5:	5e                   	pop    %rsi
  400dc6:	48 89 e2             	mov    %rsp,%rdx
  400dc9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  400dcd:	50                   	push   %rax
  400dce:	54                   	push   %rsp
  400dcf:	49 c7 c0 00 13 40 00 	mov    $0x401300,%r8
  400dd6:	48 c7 c1 90 12 40 00 	mov    $0x401290,%rcx
  400ddd:	48 c7 c7 20 0b 40 00 	mov    $0x400b20,%rdi
  400de4:	e8 77 fc ff ff       	callq  400a60 <__libc_start_main@plt>
  400de9:	f4                   	hlt    
  400dea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400df0 <deregister_tm_clones>:
  400df0:	b8 b7 20 60 00       	mov    $0x6020b7,%eax
  400df5:	55                   	push   %rbp
  400df6:	48 2d b0 20 60 00    	sub    $0x6020b0,%rax
  400dfc:	48 83 f8 0e          	cmp    $0xe,%rax
  400e00:	48 89 e5             	mov    %rsp,%rbp
  400e03:	76 1b                	jbe    400e20 <deregister_tm_clones+0x30>
  400e05:	b8 00 00 00 00       	mov    $0x0,%eax
  400e0a:	48 85 c0             	test   %rax,%rax
  400e0d:	74 11                	je     400e20 <deregister_tm_clones+0x30>
  400e0f:	5d                   	pop    %rbp
  400e10:	bf b0 20 60 00       	mov    $0x6020b0,%edi
  400e15:	ff e0                	jmpq   *%rax
  400e17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400e1e:	00 00 
  400e20:	5d                   	pop    %rbp
  400e21:	c3                   	retq   
  400e22:	0f 1f 40 00          	nopl   0x0(%rax)
  400e26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400e2d:	00 00 00 

0000000000400e30 <register_tm_clones>:
  400e30:	be b0 20 60 00       	mov    $0x6020b0,%esi
  400e35:	55                   	push   %rbp
  400e36:	48 81 ee b0 20 60 00 	sub    $0x6020b0,%rsi
  400e3d:	48 c1 fe 03          	sar    $0x3,%rsi
  400e41:	48 89 e5             	mov    %rsp,%rbp
  400e44:	48 89 f0             	mov    %rsi,%rax
  400e47:	48 c1 e8 3f          	shr    $0x3f,%rax
  400e4b:	48 01 c6             	add    %rax,%rsi
  400e4e:	48 d1 fe             	sar    %rsi
  400e51:	74 15                	je     400e68 <register_tm_clones+0x38>
  400e53:	b8 00 00 00 00       	mov    $0x0,%eax
  400e58:	48 85 c0             	test   %rax,%rax
  400e5b:	74 0b                	je     400e68 <register_tm_clones+0x38>
  400e5d:	5d                   	pop    %rbp
  400e5e:	bf b0 20 60 00       	mov    $0x6020b0,%edi
  400e63:	ff e0                	jmpq   *%rax
  400e65:	0f 1f 00             	nopl   (%rax)
  400e68:	5d                   	pop    %rbp
  400e69:	c3                   	retq   
  400e6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400e70 <__do_global_dtors_aux>:
  400e70:	80 3d 59 13 20 00 00 	cmpb   $0x0,0x201359(%rip)        # 6021d0 <completed.7568>
  400e77:	75 11                	jne    400e8a <__do_global_dtors_aux+0x1a>
  400e79:	55                   	push   %rbp
  400e7a:	48 89 e5             	mov    %rsp,%rbp
  400e7d:	e8 6e ff ff ff       	callq  400df0 <deregister_tm_clones>
  400e82:	5d                   	pop    %rbp
  400e83:	c6 05 46 13 20 00 01 	movb   $0x1,0x201346(%rip)        # 6021d0 <completed.7568>
  400e8a:	f3 c3                	repz retq 
  400e8c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400e90 <frame_dummy>:
  400e90:	bf 00 1e 60 00       	mov    $0x601e00,%edi
  400e95:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400e99:	75 05                	jne    400ea0 <frame_dummy+0x10>
  400e9b:	eb 93                	jmp    400e30 <register_tm_clones>
  400e9d:	0f 1f 00             	nopl   (%rax)
  400ea0:	b8 00 00 00 00       	mov    $0x0,%eax
  400ea5:	48 85 c0             	test   %rax,%rax
  400ea8:	74 f1                	je     400e9b <frame_dummy+0xb>
  400eaa:	55                   	push   %rbp
  400eab:	48 89 e5             	mov    %rsp,%rbp
  400eae:	ff d0                	callq  *%rax
  400eb0:	5d                   	pop    %rbp
  400eb1:	e9 7a ff ff ff       	jmpq   400e30 <register_tm_clones>
  400eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400ebd:	00 00 00 

0000000000400ec0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)>:
  400ec0:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  400ec4:	49 89 c3             	mov    %rax,%r11
  400ec7:	49 c1 eb 3f          	shr    $0x3f,%r11
  400ecb:	49 01 c3             	add    %rax,%r11
  400ece:	49 d1 fb             	sar    %r11
  400ed1:	4c 39 de             	cmp    %r11,%rsi
  400ed4:	0f 8d dc 00 00 00    	jge    400fb6 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0xf6>
  400eda:	49 89 f0             	mov    %rsi,%r8
  400edd:	0f 1f 00             	nopl   (%rax)
  400ee0:	49 8d 40 01          	lea    0x1(%r8),%rax
  400ee4:	4c 8d 14 00          	lea    (%rax,%rax,1),%r10
  400ee8:	48 c1 e0 04          	shl    $0x4,%rax
  400eec:	48 01 f8             	add    %rdi,%rax
  400eef:	49 8d 4a ff          	lea    -0x1(%r10),%rcx
  400ef3:	f2 0f 10 08          	movsd  (%rax),%xmm1
  400ef7:	4c 8d 0c cf          	lea    (%rdi,%rcx,8),%r9
  400efb:	f2 41 0f 10 11       	movsd  (%r9),%xmm2
  400f00:	66 0f 2f ca          	comisd %xmm2,%xmm1
  400f04:	f2 0f 5f ca          	maxsd  %xmm2,%xmm1
  400f08:	49 0f 43 ca          	cmovae %r10,%rcx
  400f0c:	49 0f 42 c1          	cmovb  %r9,%rax
  400f10:	4c 39 d9             	cmp    %r11,%rcx
  400f13:	f2 42 0f 11 0c c7    	movsd  %xmm1,(%rdi,%r8,8)
  400f19:	49 89 c8             	mov    %rcx,%r8
  400f1c:	7c c2                	jl     400ee0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0x20>
  400f1e:	f6 c2 01             	test   $0x1,%dl
  400f21:	75 16                	jne    400f39 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0x79>
  400f23:	48 83 ea 02          	sub    $0x2,%rdx
  400f27:	49 89 d0             	mov    %rdx,%r8
  400f2a:	49 c1 e8 3f          	shr    $0x3f,%r8
  400f2e:	4c 01 c2             	add    %r8,%rdx
  400f31:	48 d1 fa             	sar    %rdx
  400f34:	48 39 ca             	cmp    %rcx,%rdx
  400f37:	74 67                	je     400fa0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0xe0>
  400f39:	48 39 f1             	cmp    %rsi,%rcx
  400f3c:	7e 5b                	jle    400f99 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0xd9>
  400f3e:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
  400f42:	49 89 d0             	mov    %rdx,%r8
  400f45:	49 c1 e8 3f          	shr    $0x3f,%r8
  400f49:	49 01 d0             	add    %rdx,%r8
  400f4c:	49 d1 f8             	sar    %r8
  400f4f:	f2 42 0f 10 0c c7    	movsd  (%rdi,%r8,8),%xmm1
  400f55:	66 0f 2f c1          	comisd %xmm1,%xmm0
  400f59:	76 3e                	jbe    400f99 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0xd9>
  400f5b:	4c 39 c6             	cmp    %r8,%rsi
  400f5e:	4a 8d 04 c7          	lea    (%rdi,%r8,8),%rax
  400f62:	f2 0f 11 0c cf       	movsd  %xmm1,(%rdi,%rcx,8)
  400f67:	7d 30                	jge    400f99 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0xd9>
  400f69:	49 8d 50 ff          	lea    -0x1(%r8),%rdx
  400f6d:	48 89 d1             	mov    %rdx,%rcx
  400f70:	48 c1 e9 3f          	shr    $0x3f,%rcx
  400f74:	48 01 ca             	add    %rcx,%rdx
  400f77:	4c 89 c1             	mov    %r8,%rcx
  400f7a:	48 d1 fa             	sar    %rdx
  400f7d:	f2 0f 10 0c d7       	movsd  (%rdi,%rdx,8),%xmm1
  400f82:	66 0f 2f c1          	comisd %xmm1,%xmm0
  400f86:	76 11                	jbe    400f99 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0xd9>
  400f88:	49 89 d0             	mov    %rdx,%r8
  400f8b:	f2 0f 11 0c cf       	movsd  %xmm1,(%rdi,%rcx,8)
  400f90:	4c 39 c6             	cmp    %r8,%rsi
  400f93:	4a 8d 04 c7          	lea    (%rdi,%r8,8),%rax
  400f97:	7c d0                	jl     400f69 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0xa9>
  400f99:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  400f9d:	c3                   	retq   
  400f9e:	66 90                	xchg   %ax,%ax
  400fa0:	48 8d 4c 09 01       	lea    0x1(%rcx,%rcx,1),%rcx
  400fa5:	48 8d 14 cf          	lea    (%rdi,%rcx,8),%rdx
  400fa9:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  400fad:	f2 0f 11 08          	movsd  %xmm1,(%rax)
  400fb1:	48 89 d0             	mov    %rdx,%rax
  400fb4:	eb 83                	jmp    400f39 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0x79>
  400fb6:	f6 c2 01             	test   $0x1,%dl
  400fb9:	48 8d 04 f7          	lea    (%rdi,%rsi,8),%rax
  400fbd:	48 89 f1             	mov    %rsi,%rcx
  400fc0:	0f 84 5d ff ff ff    	je     400f23 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0x63>
  400fc6:	eb d1                	jmp    400f99 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)+0xd9>
  400fc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  400fcf:	00 

0000000000400fd0 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)>:
  400fd0:	41 57                	push   %r15
  400fd2:	48 89 d0             	mov    %rdx,%rax
  400fd5:	41 56                	push   %r14
  400fd7:	41 55                	push   %r13
  400fd9:	41 54                	push   %r12
  400fdb:	48 29 f8             	sub    %rdi,%rax
  400fde:	55                   	push   %rbp
  400fdf:	53                   	push   %rbx
  400fe0:	48 89 d5             	mov    %rdx,%rbp
  400fe3:	48 89 fb             	mov    %rdi,%rbx
  400fe6:	49 89 fe             	mov    %rdi,%r14
  400fe9:	48 83 ec 18          	sub    $0x18,%rsp
  400fed:	48 83 f8 1f          	cmp    $0x1f,%rax
  400ff1:	0f 8e af 01 00 00    	jle    4011a6 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1d6>
  400ff7:	48 85 c9             	test   %rcx,%rcx
  400ffa:	49 89 f5             	mov    %rsi,%r13
  400ffd:	0f 84 d4 00 00 00    	je     4010d7 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x107>
  401003:	f2 0f 10 0f          	movsd  (%rdi),%xmm1
  401007:	48 c1 f8 04          	sar    $0x4,%rax
  40100b:	f2 0f 10 53 08       	movsd  0x8(%rbx),%xmm2
  401010:	48 8d 04 c3          	lea    (%rbx,%rax,8),%rax
  401014:	48 83 e9 01          	sub    $0x1,%rcx
  401018:	f2 0f 10 5d f8       	movsd  -0x8(%rbp),%xmm3
  40101d:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401021:	66 0f 2f c2          	comisd %xmm2,%xmm0
  401025:	0f 86 1e 02 00 00    	jbe    401249 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x279>
  40102b:	66 0f 2f d8          	comisd %xmm0,%xmm3
  40102f:	0f 87 24 02 00 00    	ja     401259 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x289>
  401035:	66 0f 2f da          	comisd %xmm2,%xmm3
  401039:	0f 86 30 02 00 00    	jbe    40126f <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x29f>
  40103f:	f2 0f 11 1b          	movsd  %xmm3,(%rbx)
  401043:	66 0f 28 c1          	movapd %xmm1,%xmm0
  401047:	f2 0f 11 4d f8       	movsd  %xmm1,-0x8(%rbp)
  40104c:	f2 0f 10 0b          	movsd  (%rbx),%xmm1
  401050:	48 8d 53 10          	lea    0x10(%rbx),%rdx
  401054:	48 89 e8             	mov    %rbp,%rax
  401057:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40105e:	00 00 
  401060:	f2 0f 10 52 f8       	movsd  -0x8(%rdx),%xmm2
  401065:	48 8d 72 f8          	lea    -0x8(%rdx),%rsi
  401069:	66 0f 2f ca          	comisd %xmm2,%xmm1
  40106d:	77 36                	ja     4010a5 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0xd5>
  40106f:	48 83 e8 08          	sub    $0x8,%rax
  401073:	66 0f 2f c1          	comisd %xmm1,%xmm0
  401077:	76 15                	jbe    40108e <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0xbe>
  401079:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  401080:	48 83 e8 08          	sub    $0x8,%rax
  401084:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401088:	66 0f 2f c1          	comisd %xmm1,%xmm0
  40108c:	77 f2                	ja     401080 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0xb0>
  40108e:	48 39 f0             	cmp    %rsi,%rax
  401091:	76 18                	jbe    4010ab <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0xdb>
  401093:	f2 0f 11 42 f8       	movsd  %xmm0,-0x8(%rdx)
  401098:	f2 0f 11 10          	movsd  %xmm2,(%rax)
  40109c:	f2 0f 10 40 f8       	movsd  -0x8(%rax),%xmm0
  4010a1:	f2 0f 10 0b          	movsd  (%rbx),%xmm1
  4010a5:	48 83 c2 08          	add    $0x8,%rdx
  4010a9:	eb b5                	jmp    401060 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x90>
  4010ab:	49 39 f5             	cmp    %rsi,%r13
  4010ae:	0f 82 dc 00 00 00    	jb     401190 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
  4010b4:	48 89 f3             	mov    %rsi,%rbx
  4010b7:	48 89 e8             	mov    %rbp,%rax
  4010ba:	48 29 d8             	sub    %rbx,%rax
  4010bd:	66 0f 28 ca          	movapd %xmm2,%xmm1
  4010c1:	48 83 f8 1f          	cmp    $0x1f,%rax
  4010c5:	49 89 de             	mov    %rbx,%r14
  4010c8:	0f 8e d8 00 00 00    	jle    4011a6 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1d6>
  4010ce:	48 85 c9             	test   %rcx,%rcx
  4010d1:	0f 85 30 ff ff ff    	jne    401007 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x37>
  4010d7:	4d 8d 65 08          	lea    0x8(%r13),%r12
  4010db:	4c 89 e0             	mov    %r12,%rax
  4010de:	4c 29 f0             	sub    %r14,%rax
  4010e1:	49 89 c6             	mov    %rax,%r14
  4010e4:	49 c1 fe 03          	sar    $0x3,%r14
  4010e8:	4d 8d 7e fe          	lea    -0x2(%r14),%r15
  4010ec:	49 d1 ff             	sar    %r15
  4010ef:	49 83 fe 01          	cmp    $0x1,%r14
  4010f3:	7f 6b                	jg     401160 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x190>
  4010f5:	49 39 ec             	cmp    %rbp,%r12
  4010f8:	f2 0f 10 0b          	movsd  (%rbx),%xmm1
  4010fc:	72 0b                	jb     401109 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x139>
  4010fe:	eb 3d                	jmp    40113d <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x16d>
  401100:	49 83 c4 08          	add    $0x8,%r12
  401104:	4c 39 e5             	cmp    %r12,%rbp
  401107:	76 34                	jbe    40113d <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x16d>
  401109:	f2 41 0f 10 04 24    	movsd  (%r12),%xmm0
  40110f:	66 0f 2f c8          	comisd %xmm0,%xmm1
  401113:	76 eb                	jbe    401100 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x130>
  401115:	48 83 ec 08          	sub    $0x8,%rsp
  401119:	f2 41 0f 11 0c 24    	movsd  %xmm1,(%r12)
  40111f:	4c 89 f2             	mov    %r14,%rdx
  401122:	6a 00                	pushq  $0x0
  401124:	31 f6                	xor    %esi,%esi
  401126:	48 89 df             	mov    %rbx,%rdi
  401129:	49 83 c4 08          	add    $0x8,%r12
  40112d:	e8 8e fd ff ff       	callq  400ec0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)>
  401132:	4c 39 e5             	cmp    %r12,%rbp
  401135:	f2 0f 10 0b          	movsd  (%rbx),%xmm1
  401139:	58                   	pop    %rax
  40113a:	5a                   	pop    %rdx
  40113b:	77 cc                	ja     401109 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x139>
  40113d:	f2 41 0f 10 45 00    	movsd  0x0(%r13),%xmm0
  401143:	f2 0f 11 03          	movsd  %xmm0,(%rbx)
  401147:	f2 41 0f 11 4d 00    	movsd  %xmm1,0x0(%r13)
  40114d:	48 83 c4 18          	add    $0x18,%rsp
  401151:	5b                   	pop    %rbx
  401152:	5d                   	pop    %rbp
  401153:	41 5c                	pop    %r12
  401155:	41 5d                	pop    %r13
  401157:	41 5e                	pop    %r14
  401159:	41 5f                	pop    %r15
  40115b:	c3                   	retq   
  40115c:	49 83 ef 01          	sub    $0x1,%r15
  401160:	48 83 ec 08          	sub    $0x8,%rsp
  401164:	f2 42 0f 10 04 fb    	movsd  (%rbx,%r15,8),%xmm0
  40116a:	6a 00                	pushq  $0x0
  40116c:	4c 89 fe             	mov    %r15,%rsi
  40116f:	4c 89 f2             	mov    %r14,%rdx
  401172:	48 89 df             	mov    %rbx,%rdi
  401175:	e8 46 fd ff ff       	callq  400ec0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, double, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, long, double, __gnu_cxx::__ops::_Iter_less_iter)>
  40117a:	4d 85 ff             	test   %r15,%r15
  40117d:	59                   	pop    %rcx
  40117e:	5e                   	pop    %rsi
  40117f:	75 db                	jne    40115c <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x18c>
  401181:	e9 6f ff ff ff       	jmpq   4010f5 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x125>
  401186:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40118d:	00 00 00 
  401190:	48 89 f5             	mov    %rsi,%rbp
  401193:	49 89 de             	mov    %rbx,%r14
  401196:	48 89 e8             	mov    %rbp,%rax
  401199:	48 29 d8             	sub    %rbx,%rax
  40119c:	48 83 f8 1f          	cmp    $0x1f,%rax
  4011a0:	0f 8f 28 ff ff ff    	jg     4010ce <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0xfe>
  4011a6:	48 39 eb             	cmp    %rbp,%rbx
  4011a9:	74 a2                	je     40114d <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x17d>
  4011ab:	4c 8d 63 08          	lea    0x8(%rbx),%r12
  4011af:	49 39 ec             	cmp    %rbp,%r12
  4011b2:	74 99                	je     40114d <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x17d>
  4011b4:	f2 41 0f 10 0c 24    	movsd  (%r12),%xmm1
  4011ba:	41 bd 08 00 00 00    	mov    $0x8,%r13d
  4011c0:	66 0f 2f 0b          	comisd (%rbx),%xmm1
  4011c4:	72 4e                	jb     401214 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x244>
  4011c6:	f2 41 0f 10 44 24 f8 	movsd  -0x8(%r12),%xmm0
  4011cd:	49 8d 44 24 f8       	lea    -0x8(%r12),%rax
  4011d2:	66 0f 2f c1          	comisd %xmm1,%xmm0
  4011d6:	77 0b                	ja     4011e3 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x213>
  4011d8:	e9 a9 00 00 00       	jmpq   401286 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2b6>
  4011dd:	0f 1f 00             	nopl   (%rax)
  4011e0:	48 89 d0             	mov    %rdx,%rax
  4011e3:	f2 0f 11 40 08       	movsd  %xmm0,0x8(%rax)
  4011e8:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  4011ec:	f2 0f 10 40 f8       	movsd  -0x8(%rax),%xmm0
  4011f1:	66 0f 2f c1          	comisd %xmm1,%xmm0
  4011f5:	77 e9                	ja     4011e0 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x210>
  4011f7:	f2 0f 11 08          	movsd  %xmm1,(%rax)
  4011fb:	49 83 c4 08          	add    $0x8,%r12
  4011ff:	4c 39 e5             	cmp    %r12,%rbp
  401202:	0f 84 45 ff ff ff    	je     40114d <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x17d>
  401208:	f2 41 0f 10 0c 24    	movsd  (%r12),%xmm1
  40120e:	66 0f 2f 0b          	comisd (%rbx),%xmm1
  401212:	73 b2                	jae    4011c6 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1f6>
  401214:	4c 89 e2             	mov    %r12,%rdx
  401217:	4c 29 f2             	sub    %r14,%rdx
  40121a:	48 89 d0             	mov    %rdx,%rax
  40121d:	48 c1 f8 03          	sar    $0x3,%rax
  401221:	48 85 c0             	test   %rax,%rax
  401224:	74 1d                	je     401243 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x273>
  401226:	4c 89 ef             	mov    %r13,%rdi
  401229:	48 89 de             	mov    %rbx,%rsi
  40122c:	f2 0f 11 4c 24 08    	movsd  %xmm1,0x8(%rsp)
  401232:	48 29 d7             	sub    %rdx,%rdi
  401235:	4c 01 e7             	add    %r12,%rdi
  401238:	e8 73 f8 ff ff       	callq  400ab0 <memmove@plt>
  40123d:	f2 0f 10 4c 24 08    	movsd  0x8(%rsp),%xmm1
  401243:	f2 0f 11 0b          	movsd  %xmm1,(%rbx)
  401247:	eb b2                	jmp    4011fb <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x22b>
  401249:	66 0f 2f da          	comisd %xmm2,%xmm3
  40124d:	77 20                	ja     40126f <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x29f>
  40124f:	66 0f 2f d8          	comisd %xmm0,%xmm3
  401253:	0f 87 e6 fd ff ff    	ja     40103f <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x6f>
  401259:	f2 0f 11 03          	movsd  %xmm0,(%rbx)
  40125d:	f2 0f 11 08          	movsd  %xmm1,(%rax)
  401261:	f2 0f 10 0b          	movsd  (%rbx),%xmm1
  401265:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
  40126a:	e9 e1 fd ff ff       	jmpq   401050 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x80>
  40126f:	f2 0f 11 4b 08       	movsd  %xmm1,0x8(%rbx)
  401274:	66 0f 28 ca          	movapd %xmm2,%xmm1
  401278:	f2 0f 11 13          	movsd  %xmm2,(%rbx)
  40127c:	f2 0f 10 45 f8       	movsd  -0x8(%rbp),%xmm0
  401281:	e9 ca fd ff ff       	jmpq   401050 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x80>
  401286:	4c 89 e0             	mov    %r12,%rax
  401289:	e9 69 ff ff ff       	jmpq   4011f7 <void std::__introselect<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x227>
  40128e:	66 90                	xchg   %ax,%ax

0000000000401290 <__libc_csu_init>:
  401290:	41 57                	push   %r15
  401292:	41 56                	push   %r14
  401294:	41 89 ff             	mov    %edi,%r15d
  401297:	41 55                	push   %r13
  401299:	41 54                	push   %r12
  40129b:	4c 8d 25 3e 0b 20 00 	lea    0x200b3e(%rip),%r12        # 601de0 <__frame_dummy_init_array_entry>
  4012a2:	55                   	push   %rbp
  4012a3:	48 8d 2d 4e 0b 20 00 	lea    0x200b4e(%rip),%rbp        # 601df8 <__init_array_end>
  4012aa:	53                   	push   %rbx
  4012ab:	49 89 f6             	mov    %rsi,%r14
  4012ae:	49 89 d5             	mov    %rdx,%r13
  4012b1:	31 db                	xor    %ebx,%ebx
  4012b3:	4c 29 e5             	sub    %r12,%rbp
  4012b6:	48 83 ec 08          	sub    $0x8,%rsp
  4012ba:	48 c1 fd 03          	sar    $0x3,%rbp
  4012be:	e8 1d f7 ff ff       	callq  4009e0 <_init>
  4012c3:	48 85 ed             	test   %rbp,%rbp
  4012c6:	74 1e                	je     4012e6 <__libc_csu_init+0x56>
  4012c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4012cf:	00 
  4012d0:	4c 89 ea             	mov    %r13,%rdx
  4012d3:	4c 89 f6             	mov    %r14,%rsi
  4012d6:	44 89 ff             	mov    %r15d,%edi
  4012d9:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  4012dd:	48 83 c3 01          	add    $0x1,%rbx
  4012e1:	48 39 eb             	cmp    %rbp,%rbx
  4012e4:	75 ea                	jne    4012d0 <__libc_csu_init+0x40>
  4012e6:	48 83 c4 08          	add    $0x8,%rsp
  4012ea:	5b                   	pop    %rbx
  4012eb:	5d                   	pop    %rbp
  4012ec:	41 5c                	pop    %r12
  4012ee:	41 5d                	pop    %r13
  4012f0:	41 5e                	pop    %r14
  4012f2:	41 5f                	pop    %r15
  4012f4:	c3                   	retq   
  4012f5:	90                   	nop
  4012f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4012fd:	00 00 00 

0000000000401300 <__libc_csu_fini>:
  401300:	f3 c3                	repz retq 

Desensamblado de la sección .fini:

0000000000401304 <_fini>:
  401304:	48 83 ec 08          	sub    $0x8,%rsp
  401308:	48 83 c4 08          	add    $0x8,%rsp
  40130c:	c3                   	retq   
